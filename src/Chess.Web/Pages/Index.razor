@page "/"
@using Chess.Web.Application
@using Chess.Web.Domain
@using Chess.Web.Models 
@inject Chess.Web.Models.AppState State
@implements IDisposable

<PageTitle>Chess :: Home</PageTitle>

<main>
	@if (GameRunner?.Winner != null) {
		<div class="alert alert-danger text-center position-absolute" style="width: 100vw; top: 30%; z-index: 1" role="alert">
			<h4 class="alert-heading">Game Over!</h4>
			<div class="alert alert-success" role="alert">
				<p>
					<strong>
						@GameRunner?.Winner.ToString() player
					</strong> is the winner of the game.
				</p>
				<p class="mb-0"><i>Refresh the page to play again!</i></p>
			</div>
		</div>
	}
	else {
	<div class="container p-0" style="height: 100vh; max-width: 900px">
		<div id="player-section" class="row">
			<div class="col">
				<section id="main-board">
					<table class="table table-bordered">
						<tbody>
							@for (var i = 0; i < 8; ++i) {
								State.ToggleBgColor();
								var rank = i;
								<tr>
									@for (var j = 0; j < 8; ++j) {
										var file = j;
										var classNames = $"board-cell {State.BgColor}";
										if (GameRunner?.Board[i, j] is not null) {
											classNames = $"{classNames} has-piece";
										}
										if (Location?.FromRank == rank && Location?.FromFile == file) {
											classNames = $"{classNames} {State.HightlightSourcePiece()}";
										}
										<td id="@(i * 8 + j)"
												class="@classNames"
												data-rank="@i"
												data-file="@j"
												data-name="@GameRunner?.Board[i, j]?.Name"
												@onclick="async () =>
											{
												await OnTdElementClickAsync(rank, file);
											}">
											@if (GameRunner?.Board[i, j]?.Name is not null) {
												<img class="m-auto mt-0 mb-0"
														 src="img/@(GameRunner.Board[i, j]?.Name).png" />
											}
										</td>
										State.ToggleBgColor();
									}
								</tr>
							}
						</tbody>
					</table>
				</section>
			</div>

			<div class="col">
				<section id="dashboard" class="position-relative" style="top: 28%">
					@if (GameRunner?.TheColorInTurn == Color.Black) {
						<div class="who-is-palying">
							<span>🟢</span><em>Waiting for opponent...</em>
						</div>
					}
					<div id="analysis-board" style="height: 144px; overflow-y: auto">
						<table>
							<tbody>
								@foreach (var row in State.PieceMovingHistory.History) {
									var black = row.Value.Item1;
									var white = row.Value.Item2;
									<tr style="height: 36px;">
										<td class="counter">@row.Key</td>
										<td class="turned-piece">
											@if (black is not null) {
												<img src="img/@(black?.Name).png" /><span>@black?.ToRank</span><span>x</span><span>@black?.ToFile</span>
											}
										</td>
										@if (white is not null) {
											<td class="turned-piece">
												<img src="img/@(white.Name).png" /><span>@white.ToRank</span><span>x</span><span>@white.ToFile</span>
											</td>
										}
									</tr>
								}
							</tbody>
						</table>
					</div>
					@if (GameRunner?.TheColorInTurn == Color.White) {
						<div class="who-is-palying">
							<span>🟢</span><em>Your Turn</em>
						</div>
					}
				</section>
			</div>
		</div>		
	</div>
	}
</main>

@code {
	private IGameHandler GameRunner { get; set; }
	private MovingPieceCurrentLocation Location { get; set; }

	protected override void OnInitialized()
	{
		GameRunner = State.GameHandler;
		Location = State.Location;

		GameRunner.Init();
	}

	private async Task OnTdElementClickAsync(int rank, int file)
	{
		try {
			if (Location.FromRank is -1 || Location.FromFile is -1) {
				Location.SetSourceLocation(GameRunner.Board, rank, file);

				return;
			}

			Location.SetDestinition(rank, file);
			await State.MovePiece();
		}
		catch (Exception ex) {
			System.Diagnostics.Debug.WriteLine(ex.Message);
		}
	}

	public void Dispose()
	{
		State.OnChange -= StateHasChanged;
	}
}